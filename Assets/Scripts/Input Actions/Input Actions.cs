//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Scripts/Input Actions/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""1d1d39bd-bea9-4696-9157-a8802b48795f"",
            ""actions"": [
                {
                    ""name"": ""Left Button"",
                    ""type"": ""Button"",
                    ""id"": ""481c773f-f498-423b-bc82-f35c19023e01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Button"",
                    ""type"": ""Button"",
                    ""id"": ""30326b04-49a0-40eb-a3c4-49d39b3ba8f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6d4329ee-954c-4943-be8e-fb32bfd42335"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d6382f1-b3cd-4a6c-b119-44ec62443e9a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Modifiers"",
            ""id"": ""d9d2ef96-53b7-4ad2-ab65-96e04224ec5a"",
            ""actions"": [
                {
                    ""name"": ""Multiplace"",
                    ""type"": ""Button"",
                    ""id"": ""15d80091-a383-409d-b568-19e121eff270"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04f689a7-5198-4731-8824-dbc116d0f5af"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Multiplace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_LeftButton = m_Mouse.FindAction("Left Button", throwIfNotFound: true);
        m_Mouse_RightButton = m_Mouse.FindAction("Right Button", throwIfNotFound: true);
        // Modifiers
        m_Modifiers = asset.FindActionMap("Modifiers", throwIfNotFound: true);
        m_Modifiers_Multiplace = m_Modifiers.FindAction("Multiplace", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_LeftButton;
    private readonly InputAction m_Mouse_RightButton;
    public struct MouseActions
    {
        private @InputActions m_Wrapper;
        public MouseActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftButton => m_Wrapper.m_Mouse_LeftButton;
        public InputAction @RightButton => m_Wrapper.m_Mouse_RightButton;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @LeftButton.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnLeftButton;
                @LeftButton.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnLeftButton;
                @LeftButton.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnLeftButton;
                @RightButton.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnRightButton;
                @RightButton.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnRightButton;
                @RightButton.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnRightButton;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftButton.started += instance.OnLeftButton;
                @LeftButton.performed += instance.OnLeftButton;
                @LeftButton.canceled += instance.OnLeftButton;
                @RightButton.started += instance.OnRightButton;
                @RightButton.performed += instance.OnRightButton;
                @RightButton.canceled += instance.OnRightButton;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Modifiers
    private readonly InputActionMap m_Modifiers;
    private IModifiersActions m_ModifiersActionsCallbackInterface;
    private readonly InputAction m_Modifiers_Multiplace;
    public struct ModifiersActions
    {
        private @InputActions m_Wrapper;
        public ModifiersActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Multiplace => m_Wrapper.m_Modifiers_Multiplace;
        public InputActionMap Get() { return m_Wrapper.m_Modifiers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ModifiersActions set) { return set.Get(); }
        public void SetCallbacks(IModifiersActions instance)
        {
            if (m_Wrapper.m_ModifiersActionsCallbackInterface != null)
            {
                @Multiplace.started -= m_Wrapper.m_ModifiersActionsCallbackInterface.OnMultiplace;
                @Multiplace.performed -= m_Wrapper.m_ModifiersActionsCallbackInterface.OnMultiplace;
                @Multiplace.canceled -= m_Wrapper.m_ModifiersActionsCallbackInterface.OnMultiplace;
            }
            m_Wrapper.m_ModifiersActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Multiplace.started += instance.OnMultiplace;
                @Multiplace.performed += instance.OnMultiplace;
                @Multiplace.canceled += instance.OnMultiplace;
            }
        }
    }
    public ModifiersActions @Modifiers => new ModifiersActions(this);
    public interface IMouseActions
    {
        void OnLeftButton(InputAction.CallbackContext context);
        void OnRightButton(InputAction.CallbackContext context);
    }
    public interface IModifiersActions
    {
        void OnMultiplace(InputAction.CallbackContext context);
    }
}
